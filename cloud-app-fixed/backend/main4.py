from flask import Flask, jsonify, render_template, request
from google.cloud import storage
import random
import os
import subprocess

# Set the GOOGLE_APPLICATION_CREDENTIALS environment variable
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = r"C:\Users\ANNE CREMONA\Downloads\gifted-pulsar-422809-q0-b4d9cc90c98c.json"

app = Flask(__name__, template_folder='../frontend/templates', static_folder='../frontend/static')

# Initialize the Google Cloud Storage client
storage_client = storage.Client()
bucket_name = 'random-numbers1'
bucket = storage_client.get_bucket(bucket_name)

# Retrieve the GAE instance ID
GAE_INSTANCE = os.environ.get('GAE_INSTANCE', 'Unknown')

def fetch_random_numbers_from_bucket():
    """
    Fetches all random numbers stored in the Cloud Storage bucket.
    """
    numbers = []
    blobs = bucket.list_blobs(prefix='random_numbers/')
    
    try:
        for blob in blobs:
            data = blob.download_as_string().decode('utf-8')
            numbers.append(int(data))
        print(f"Fetched random numbers from bucket in instance {GAE_INSTANCE}: {numbers}")
    except Exception as e:
        print(f"Error fetching random numbers from bucket in instance {GAE_INSTANCE}: {e}")
    
    return numbers

def store_random_number(random_number):
    """
    Stores a random number in the Cloud Storage bucket.
    """
    blob = bucket.blob(f'random_numbers/{random_number}.txt')
    try:
        blob.upload_from_string(str(random_number))
        print(f"Stored random number {random_number} in bucket from instance {GAE_INSTANCE}")
    except Exception as e:
        print(f"Error storing random number {random_number} in bucket from instance {GAE_INSTANCE}: {e}")

@app.route('/')
def home():
    print(f"Rendering home page in instance {GAE_INSTANCE}")
    return render_template('index3.html')

@app.route('/delete_bucket_contents', methods=['POST'])
def delete_bucket_contents():
    try:
        # Use subprocess to execute gsutil command to delete all objects in the bucket
        subprocess.run(['gsutil', '-m', 'rm', '-r', f'gs://{bucket_name}/*'])

        return jsonify({'message': 'Bucket contents deleted successfully'}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/generate', methods=['GET'])
def generate_random_number():
    """
    Generates a single random number and stores it in the Cloud Storage bucket.
    """
    random_number = random.randint(0, 100000)
    
    # Store the random number in the Cloud Storage bucket
    store_random_number(random_number)
    
    print(f"Generated and stored random number {random_number} in instance {GAE_INSTANCE}")
    return jsonify({'randomNumber': random_number})

@app.route('/results', methods=['GET'])
def get_results():
    """
    Retrieves the minimum, maximum, and total numbers generated by each instance.
    """
    print(f"Request received for results in instance {GAE_INSTANCE}")
    
    # Fetch the random numbers from the Cloud Storage bucket
    random_numbers = fetch_random_numbers_from_bucket()
    
    min_number = min(random_numbers)
    max_number = max(random_numbers)
    
    # Count the total numbers generated by each instance
    instances_count = {}
    for _ in random_numbers:
        instance_id = f'instance_{random.randint(1, 1000)}'  # Dummy instance ID for demonstration
        instances_count[instance_id] = instances_count.get(instance_id, 0) + 1
    
    # Format the output string
    output = f"Maximum: {max_number} (from instance {GAE_INSTANCE})\n"
    output += f"Minimum: {min_number} (from instance {GAE_INSTANCE})\n"
    output += "Total Numbers Generated By Each Instance\n"
    for instance_id, count in instances_count.items():
        output += f"Instance {instance_id} generated {count} numbers\n"
    
    print(f"Calculated results: \n{output}")
    
    return jsonify({
        'output': output,
        'min': min_number,
        'max': max_number,
    })

if __name__ == '__main__':
    app.run()
